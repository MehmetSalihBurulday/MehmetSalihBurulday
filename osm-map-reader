
#include "lanelet_work/n.hpp"


using namespace std;

using namespace lanelet;

id::id(ros::NodeHandle& nodeHandle) : nodeHandle_(nodeHandle) {
   
    if (!readParameters()) {
        ROS_ERROR("calismadi.");
        ros::requestShutdown();
    }
    
    projection::UtmProjector projector(Origin({40, 28}));
    map_ = load(map_path, projector);
    
    traffic_rules::TrafficRulesPtr trafficRules =traffic_rules::TrafficRulesFactory::create(Locations::Germany, Participants::Vehicle);
    routingGraph = routing::RoutingGraph::build(*map_,*trafficRules);
    
    
    sub = nodeHandle_.subscribe("/initialpose",100,&id::start,this); 
    sub2 = nodeHandle_.subscribe("/move_base_simple/goal",100,&id::stop,this);

    markerArrayPublisher_ = nodeHandle_.advertise<visualization_msgs::MarkerArray>("lanelet_markers", 1);
      
    pathPublisher= nodeHandle_.advertise<nav_msgs::Path>("ShortestPath",1);
     for (auto point : map_->pointLayer)
    {
        point.x() = point.attribute("local_x").asDouble().value();
        point.y() = point.attribute("local_y").asDouble().value();
    }



      timer_ = nodeHandle.createTimer(ros::Duration(1.0), &id::callback, this);

}



void id::callback(const ros::TimerEvent& e) {
    
  
   
   
   if(dongu<1){
     
     dongu++; 
   
    
        for (const auto& lanelet : map_->laneletLayer){
            
            lanelet_sayisi++;
            marker.header.stamp = ros::Time::now();
            marker.ns = "lanelets";
            marker.type = visualization_msgs::Marker::LINE_STRIP;
            marker.action = visualization_msgs::Marker::ADD;
            marker.pose.orientation.w = 1.0;
            marker.scale.x = 0.2; 
            marker.color.r = 1.0; 
            marker.color.a = 1.0;
            marker.color.g= 0.3;
            marker.color.b=0.9;
            marker.header.frame_id = "map";
            vector<geometry_msgs::Point> sag_sinir;
            vector<geometry_msgs::Point> sol_sinir;
       
       
            for (auto point : lanelet.rightBound()){
       
                p.x = point.x();
                p.y = point.y();
                sag_sinir.push_back(p); marker.id = sayac;
                marker.points = sag_sinir;
                sayac++; 
            }
   
         markerArray.markers.push_back(marker);

            for (auto point : lanelet.leftBound()){
    
                p.x = point.x();
                p.y = point.y();

                sol_sinir.push_back(p);
                marker.id = sayac;
                marker.points = sol_sinir;
                sayac++;
            }

         markerArray.markers.push_back(marker);
        }
    
        
        for (const auto& lanelet : map_->laneletLayer) {
            
            
            vector<geometry_msgs::Point> center_line;
     
            marker2.header.stamp = ros::Time::now();
            marker2.ns = "lanelets";
            marker2.type = visualization_msgs::Marker::LINE_STRIP;
            marker2.action = visualization_msgs::Marker::ADD;
            marker2.pose.orientation.w = 1.0;
            marker2.scale.x = 0.2; 
            marker2.color.r = 1; 
            marker2.color.a = 0.15;
            marker2.color.g= 1;
            marker2.color.b=1;
            marker2.header.frame_id = "map"; 
    
   
            for (auto point : lanelet.centerline()){
        
                p.x = point.x();
                p.y = point.y();
        
                center_line.push_back(p);
                marker2.id = sayac;
                marker2.points = center_line;
                sayac++;
                }

        markerArray.markers.push_back(marker2);
         }
     
        
        for(const auto& area : map_->areaLayer){  
      
      
            marker3.header.stamp = ros::Time::now();
            marker3.ns = "lanelets";
            marker3.type = visualization_msgs::Marker::LINE_STRIP;
            marker3.action = visualization_msgs::Marker::ADD;
            marker3.scale.x = 0.2; 
            marker3.color.r = 0.4; 
            marker3.color.a = 2.0;
            marker3.color.g= 0.12;
            marker3.color.b=0.80;
            marker3.header.frame_id = "map";
   
            vector<geometry_msgs::Point> area123;
   
             for(auto linestring:area.outerBound()){
   
                for(const auto& point: linestring){
  
                    p.x=point.x();
                    p.y=point.y();
    
                    area123.push_back(p);
                    marker3.id=sayac;
                    marker3.points = area123;
                    sayac++;
                } 
            }   
       
       
         markerArray.markers.push_back(marker3);
     

        }
  
    }   

    
   
    if(belirtec1+belirtec2>1){
        

        

        ConstLanelet pointA = map_->laneletLayer.get(b);
  
        ConstLanelet pointB = map_->laneletLayer.get(d);

        Optional<routing::LaneletPath> shortestPath = routingGraph->shortestPath(pointA, pointB, 1);
     
        

         if(shortestPath){
      
            for (const auto& lanelet : *shortestPath){
                for (const auto& point : lanelet.centerline()){
                    geometry_msgs::PoseStamped pathPoints;
                    pathPoints.pose.position.x = point.x();
                    pathPoints.pose.position.y = point.y();
                    pathPoints.pose.position.z =0;
                    

                    PathMsg.header.frame_id="map";
                    PathMsg.poses.push_back(pathPoints);
                }
            
            }
        }
     belirtec1=0;
     belirtec2=0;
     
    }
 
 pathPublisher.publish(PathMsg);
 markerArrayPublisher_.publish(markerArray);
 cout<<"published"<<endl;
 
     
}
     

void id::start(const geometry_msgs::PoseWithCovarianceStamped::ConstPtr& pose){
 
 startx = pose->pose.pose.position.x;
 starty = pose->pose.pose.position.y;
 belirtec1=1;
 BasicPoint2d start1(startx,starty);

 vector<std::pair<double, Lanelet>> closestLanelets = geometry::findNearest(map_->laneletLayer,start1, lanelet_sayisi);
         
    for (const auto& laneletPair : closestLanelets) {
        
     const Lanelet& closestLanelet = laneletPair.second;
        
        if(a!=1){
               b=closestLanelet.id();
               a++; 
         }
    }
 a=0;
  if(belirtec1+belirtec2==1)
   PathMsg.poses.clear();
}

void id::stop(const geometry_msgs::PoseStamped::ConstPtr& nokta){
 
 stopx = nokta->pose.position.x;
 stopy = nokta->pose.position.y;
 belirtec2=1; 
 BasicPoint2d stop1(stopx,stopy);
     
 
   
 vector<std::pair<double, Lanelet>> arrival = geometry::findNearest(map_->laneletLayer,stop1, lanelet_sayisi);
   
    for (const auto& laneletPair : arrival) {
        
     const Lanelet& closestLanelet2 = laneletPair.second;
        
         if(c!=1){
          d=closestLanelet2.id();
          c++;
        
        }
    }
    c=0;
    if(belirtec1+belirtec2==1)
   PathMsg.poses.clear();
}

bool id::readParameters() {
   
    if (!nodeHandle_.getParam("map_path", map_path)) {
        ROS_ERROR("Could not retrieve 'map' parameter");
        return false;
    }
    return true;




}
